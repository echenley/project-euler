# By listing the first six prime numbers:
# 2, 3, 5, 7, 11, and 13,
# we can see that the 6th prime is 13.

# What is the 10 001st prime number?

 # pos_prime = possible primes
 # divisor = possible divisors

primes = [2,3,5]
factors = []
num = 10001
dynum = num

def next_prime(new_prime)
    divisor = 3
    while divisor <= (new_prime / 2) + 1
        if new_prime == divisor
            return new_prime
        elsif (divisor + 1) > (new_prime / 2)
            return new_prime
        elsif new_prime % divisor == 0
            new_prime += 2
        end
        divisor += 2
    end
end

for n in (0..100)
    if primes[n] == dynum
        factors.push(primes[n])
        break
    elsif dynum % (primes[n]) == 0
        factors.push(primes[n])
        dynum /= primes[n]
        redo
    elsif n == primes.length - 1
        primes.push(next_prime(primes[n]+2))
    end
end

puts "This is your prime set: #{primes.inspect}"
puts "The prime factors of #{num} are #{factors.inspect}"
